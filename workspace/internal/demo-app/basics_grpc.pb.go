// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/basics.proto

package demo_app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Basics_Types_FullMethodName    = "/Basics/Types"
	Basics_Map_FullMethodName      = "/Basics/Map"
	Basics_Panic_FullMethodName    = "/Basics/Panic"
	Basics_Repeated_FullMethodName = "/Basics/Repeated"
)

// BasicsClient is the client API for Basics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Test basic scenarios that kaja needs to support
type BasicsClient interface {
	// All possible protobuf types
	Types(ctx context.Context, in *TypesRequest, opts ...grpc.CallOption) (*TypesRequest, error)
	Map(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*MapRequest, error)
	Panic(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Message, error)
	Repeated(ctx context.Context, in *RepeatedRequest, opts ...grpc.CallOption) (*RepeatedRequest, error)
}

type basicsClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicsClient(cc grpc.ClientConnInterface) BasicsClient {
	return &basicsClient{cc}
}

func (c *basicsClient) Types(ctx context.Context, in *TypesRequest, opts ...grpc.CallOption) (*TypesRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TypesRequest)
	err := c.cc.Invoke(ctx, Basics_Types_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicsClient) Map(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*MapRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapRequest)
	err := c.cc.Invoke(ctx, Basics_Map_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicsClient) Panic(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Basics_Panic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicsClient) Repeated(ctx context.Context, in *RepeatedRequest, opts ...grpc.CallOption) (*RepeatedRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepeatedRequest)
	err := c.cc.Invoke(ctx, Basics_Repeated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicsServer is the server API for Basics service.
// All implementations must embed UnimplementedBasicsServer
// for forward compatibility.
//
// *
// Test basic scenarios that kaja needs to support
type BasicsServer interface {
	// All possible protobuf types
	Types(context.Context, *TypesRequest) (*TypesRequest, error)
	Map(context.Context, *MapRequest) (*MapRequest, error)
	Panic(context.Context, *Void) (*Message, error)
	Repeated(context.Context, *RepeatedRequest) (*RepeatedRequest, error)
	mustEmbedUnimplementedBasicsServer()
}

// UnimplementedBasicsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBasicsServer struct{}

func (UnimplementedBasicsServer) Types(context.Context, *TypesRequest) (*TypesRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Types not implemented")
}
func (UnimplementedBasicsServer) Map(context.Context, *MapRequest) (*MapRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Map not implemented")
}
func (UnimplementedBasicsServer) Panic(context.Context, *Void) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Panic not implemented")
}
func (UnimplementedBasicsServer) Repeated(context.Context, *RepeatedRequest) (*RepeatedRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Repeated not implemented")
}
func (UnimplementedBasicsServer) mustEmbedUnimplementedBasicsServer() {}
func (UnimplementedBasicsServer) testEmbeddedByValue()                {}

// UnsafeBasicsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicsServer will
// result in compilation errors.
type UnsafeBasicsServer interface {
	mustEmbedUnimplementedBasicsServer()
}

func RegisterBasicsServer(s grpc.ServiceRegistrar, srv BasicsServer) {
	// If the following call pancis, it indicates UnimplementedBasicsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Basics_ServiceDesc, srv)
}

func _Basics_Types_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicsServer).Types(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basics_Types_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicsServer).Types(ctx, req.(*TypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basics_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicsServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basics_Map_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicsServer).Map(ctx, req.(*MapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basics_Panic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicsServer).Panic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basics_Panic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicsServer).Panic(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basics_Repeated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepeatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicsServer).Repeated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basics_Repeated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicsServer).Repeated(ctx, req.(*RepeatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Basics_ServiceDesc is the grpc.ServiceDesc for Basics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Basics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Basics",
	HandlerType: (*BasicsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Types",
			Handler:    _Basics_Types_Handler,
		},
		{
			MethodName: "Map",
			Handler:    _Basics_Map_Handler,
		},
		{
			MethodName: "Panic",
			Handler:    _Basics_Panic_Handler,
		},
		{
			MethodName: "Repeated",
			Handler:    _Basics_Repeated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/basics.proto",
}
