// @generated by protobuf-ts 2.8.3 with parameter long_type_string
// @generated from protobuf file "quirks.proto" (package "quirks.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Quirks } from "./quirks";
import type { TypesRequest } from "./quirks";
import type { RepeatedRequest } from "./quirks";
import type { MapRequest } from "./quirks";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Message } from "./quirks";
import type { Void } from "./quirks";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service quirks.v1.Quirks
 */
export interface IQuirksClient {
    /**
     * @generated from protobuf rpc: GetAuthentication(quirks.v1.Void) returns (quirks.v1.Message);
     */
    getAuthentication(input: Void, options?: RpcOptions): UnaryCall<Void, Message>;
    /**
     * @generated from protobuf rpc: Map(quirks.v1.MapRequest) returns (quirks.v1.MapRequest);
     */
    map(input: MapRequest, options?: RpcOptions): UnaryCall<MapRequest, MapRequest>;
    /**
     * @generated from protobuf rpc: MethodWithAReallyLongNameGmthggupcbmnphflnnvu(quirks.v1.Void) returns (quirks.v1.Message);
     */
    methodWithAReallyLongNameGmthggupcbmnphflnnvu(input: Void, options?: RpcOptions): UnaryCall<Void, Message>;
    /**
     * @generated from protobuf rpc: Panic(quirks.v1.Void) returns (quirks.v1.Message);
     */
    panic(input: Void, options?: RpcOptions): UnaryCall<Void, Message>;
    /**
     * @generated from protobuf rpc: Repeated(quirks.v1.RepeatedRequest) returns (quirks.v1.RepeatedRequest);
     */
    repeated(input: RepeatedRequest, options?: RpcOptions): UnaryCall<RepeatedRequest, RepeatedRequest>;
    /**
     * @generated from protobuf rpc: Types(quirks.v1.TypesRequest) returns (quirks.v1.TypesRequest);
     */
    types(input: TypesRequest, options?: RpcOptions): UnaryCall<TypesRequest, TypesRequest>;
}
/**
 * @generated from protobuf service quirks.v1.Quirks
 */
export class QuirksClient implements IQuirksClient, ServiceInfo {
    typeName = Quirks.typeName;
    methods = Quirks.methods;
    options = Quirks.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetAuthentication(quirks.v1.Void) returns (quirks.v1.Message);
     */
    getAuthentication(input: Void, options?: RpcOptions): UnaryCall<Void, Message> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Void, Message>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Map(quirks.v1.MapRequest) returns (quirks.v1.MapRequest);
     */
    map(input: MapRequest, options?: RpcOptions): UnaryCall<MapRequest, MapRequest> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MapRequest, MapRequest>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MethodWithAReallyLongNameGmthggupcbmnphflnnvu(quirks.v1.Void) returns (quirks.v1.Message);
     */
    methodWithAReallyLongNameGmthggupcbmnphflnnvu(input: Void, options?: RpcOptions): UnaryCall<Void, Message> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Void, Message>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Panic(quirks.v1.Void) returns (quirks.v1.Message);
     */
    panic(input: Void, options?: RpcOptions): UnaryCall<Void, Message> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Void, Message>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Repeated(quirks.v1.RepeatedRequest) returns (quirks.v1.RepeatedRequest);
     */
    repeated(input: RepeatedRequest, options?: RpcOptions): UnaryCall<RepeatedRequest, RepeatedRequest> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RepeatedRequest, RepeatedRequest>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Types(quirks.v1.TypesRequest) returns (quirks.v1.TypesRequest);
     */
    types(input: TypesRequest, options?: RpcOptions): UnaryCall<TypesRequest, TypesRequest> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<TypesRequest, TypesRequest>("unary", this._transport, method, opt, input);
    }
}
