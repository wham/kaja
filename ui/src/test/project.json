{
  "services": [
    {
      "name": "Quirks",
      "methods": [
        {
          "name": "GetAuthentication",
          "editorCode": "Quirks.GetAuthentication({});\n"
        },
        {
          "name": "Map",
          "editorCode": "Quirks.Map({ stringString: null, stringInt32: null, sint64String: null, stringRepeatedString: null });\n"
        },
        {
          "name": "MethodWithAReallyLongNameGmthggupcbmnphflnnvu",
          "editorCode": "Quirks.MethodWithAReallyLongNameGmthggupcbmnphflnnvu({});\n"
        },
        {
          "name": "Panic",
          "editorCode": "Quirks.Panic({});\n"
        },
        {
          "name": "Repeated",
          "editorCode": "Quirks.Repeated({ string: \"\", int32: 0, enum: null, message: null });\n"
        },
        {
          "name": "Types",
          "editorCode": "Quirks.Types({ timestamp: null, bool: true });\n"
        }
      ]
    },
    {
      "name": "SearchService",
      "methods": [
        {
          "name": "Search",
          "editorCode": "SearchService.Search({ query: \"\", pageNumber: 0, resultPerPage: 0 });\n"
        },
        {
          "name": "Index",
          "editorCode": "SearchService.Index({ result: null, position: null, additionalCopies: 0 });\n"
        }
      ]
    }
  ],
  "extraLibs": [
    {
      "filePath": "protoc/google/protobuf/timestamp.ts",
      "content": "interface Timestamp {\n    seconds: bigint;\n    nanos: number;\n}\n"
    },
    {
      "filePath": "protoc/lib/message.ts",
      "content": "interface Message {\n    name: string;\n}\n"
    },
    {
      "filePath": "protoc/quirks.client.ts",
      "content": "interface IQuirksClient {\n    getAuthentication(input: Void, options?: RpcOptions): UnaryCall<Void, Message>;\n    map(input: MapRequest, options?: RpcOptions): UnaryCall<MapRequest, MapRequest>;\n    methodWithAReallyLongNameGmthggupcbmnphflnnvu(input: Void, options?: RpcOptions): UnaryCall<Void, Message>;\n    panic(input: Void, options?: RpcOptions): UnaryCall<Void, Message>;\n    repeated(input: RepeatedRequest, options?: RpcOptions): UnaryCall<RepeatedRequest, RepeatedRequest>;\n    types(input: TypesRequest, options?: RpcOptions): UnaryCall<TypesRequest, TypesRequest>;\n}\n"
    },
    {
      "filePath": "protoc/quirks.ts",
      "content": "const Quirks = { getAuthentication: async (input: Void) => { }, map: async (input: MapRequest) => { }, methodWithAReallyLongNameGmthggupcbmnphflnnvu: async (input: Void) => { }, panic: async (input: Void) => { }, repeated: async (input: RepeatedRequest) => { }, types: async (input: TypesRequest) => { } };\ninterface MapRequest {\n    stringString: {\n        [key: string]: string;\n    };\n    stringInt32: {\n        [key: string]: number;\n    };\n    sint64String: {\n        [key: string]: string;\n    };\n    stringRepeatedString: {\n        [key: string]: MapRequest_RepeatedString;\n    };\n}\ninterface MapRequest_RepeatedString {\n    value: string[];\n}\ninterface RepeatedRequest {\n    string: string[];\n    int32: number[];\n    enum: RepeatedRequest_Enum[];\n    message: Message[];\n}\ninterface TypesRequest {\n    timestamp?: Timestamp;\n    bool: boolean;\n}\ninterface Void {\n}\n"
    },
    {
      "filePath": "protoc/search-service.client.ts",
      "content": "interface ISearchServiceClient {\n    search(input: SearchRequest, options?: RpcOptions): UnaryCall<SearchRequest, SearchResponse>;\n    index(input: IndexRequest, options?: RpcOptions): UnaryCall<IndexRequest, IndexResponse>;\n}\n"
    },
    {
      "filePath": "protoc/search-service.ts",
      "content": "const SearchService = { search: async (input: SearchRequest) => { }, index: async (input: IndexRequest) => { } };\ninterface SearchRequest {\n    query: string;\n    pageNumber: number;\n    resultPerPage: number;\n}\ninterface SearchResponse {\n    results: Result[];\n}\ninterface Result {\n    url: string;\n    title: string;\n    snippets: string[];\n    isAd: boolean;\n}\ninterface IndexRequest {\n    result?: Result;\n    position: Position;\n    additionalCopies: bigint;\n}\ninterface IndexResponse {\n    result?: Result;\n}\n"
    }
  ]
}
