// @generated by protobuf-ts 2.8.3 with parameter long_type_string
// @generated from protobuf file "search-service.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message SearchRequest
 */
export interface SearchRequest {
    /**
     * @generated from protobuf field: string query = 1;
     */
    query: string;
    /**
     * @generated from protobuf field: int32 page_number = 2;
     */
    pageNumber: number;
    /**
     * @generated from protobuf field: int32 result_per_page = 3;
     */
    resultPerPage: number;
}
/**
 * @generated from protobuf message SearchResponse
 */
export interface SearchResponse {
    /**
     * @generated from protobuf field: repeated Result results = 1;
     */
    results: Result[];
}
/**
 * @generated from protobuf message Result
 */
export interface Result {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: repeated string snippets = 3;
     */
    snippets: string[];
    /**
     * @generated from protobuf field: bool is_ad = 4;
     */
    isAd: boolean;
}
/**
 * @generated from protobuf message IndexRequest
 */
export interface IndexRequest {
    /**
     * @generated from protobuf field: Result result = 1;
     */
    result?: Result;
    /**
     * @generated from protobuf field: Position position = 2;
     */
    position: Position;
    /**
     * @generated from protobuf field: uint64 additional_copies = 3;
     */
    additionalCopies: string;
}
/**
 * @generated from protobuf message IndexResponse
 */
export interface IndexResponse {
    /**
     * @generated from protobuf field: Result result = 1;
     */
    result?: Result;
}
/**
 * @generated from protobuf enum Position
 */
export enum Position {
    /**
     * @generated from protobuf enum value: POSITION_TOP = 0;
     */
    TOP = 0,
    /**
     * @generated from protobuf enum value: POSITION_BOTTOM = 1;
     */
    BOTTOM = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class SearchRequest$Type extends MessageType<SearchRequest> {
    constructor() {
        super("SearchRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "result_per_page", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SearchRequest>): SearchRequest {
        const message = { query: "", pageNumber: 0, resultPerPage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchRequest): SearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* int32 page_number */ 2:
                    message.pageNumber = reader.int32();
                    break;
                case /* int32 result_per_page */ 3:
                    message.resultPerPage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* int32 page_number = 2; */
        if (message.pageNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.pageNumber);
        /* int32 result_per_page = 3; */
        if (message.resultPerPage !== 0)
            writer.tag(3, WireType.Varint).int32(message.resultPerPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SearchRequest
 */
export const SearchRequest = new SearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchResponse$Type extends MessageType<SearchResponse> {
    constructor() {
        super("SearchResponse", [
            { no: 1, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Result }
        ]);
    }
    create(value?: PartialMessage<SearchResponse>): SearchResponse {
        const message = { results: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchResponse): SearchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Result results */ 1:
                    message.results.push(Result.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Result results = 1; */
        for (let i = 0; i < message.results.length; i++)
            Result.internalBinaryWrite(message.results[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SearchResponse
 */
export const SearchResponse = new SearchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Result$Type extends MessageType<Result> {
    constructor() {
        super("Result", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "snippets", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_ad", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Result>): Result {
        const message = { url: "", title: "", snippets: [], isAd: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Result>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Result): Result {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* repeated string snippets */ 3:
                    message.snippets.push(reader.string());
                    break;
                case /* bool is_ad */ 4:
                    message.isAd = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Result, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* repeated string snippets = 3; */
        for (let i = 0; i < message.snippets.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.snippets[i]);
        /* bool is_ad = 4; */
        if (message.isAd !== false)
            writer.tag(4, WireType.Varint).bool(message.isAd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Result
 */
export const Result = new Result$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndexRequest$Type extends MessageType<IndexRequest> {
    constructor() {
        super("IndexRequest", [
            { no: 1, name: "result", kind: "message", T: () => Result },
            { no: 2, name: "position", kind: "enum", T: () => ["Position", Position, "POSITION_"] },
            { no: 3, name: "additional_copies", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<IndexRequest>): IndexRequest {
        const message = { position: 0, additionalCopies: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IndexRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndexRequest): IndexRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Result result */ 1:
                    message.result = Result.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* Position position */ 2:
                    message.position = reader.int32();
                    break;
                case /* uint64 additional_copies */ 3:
                    message.additionalCopies = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndexRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Result result = 1; */
        if (message.result)
            Result.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Position position = 2; */
        if (message.position !== 0)
            writer.tag(2, WireType.Varint).int32(message.position);
        /* uint64 additional_copies = 3; */
        if (message.additionalCopies !== "0")
            writer.tag(3, WireType.Varint).uint64(message.additionalCopies);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IndexRequest
 */
export const IndexRequest = new IndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IndexResponse$Type extends MessageType<IndexResponse> {
    constructor() {
        super("IndexResponse", [
            { no: 1, name: "result", kind: "message", T: () => Result }
        ]);
    }
    create(value?: PartialMessage<IndexResponse>): IndexResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IndexResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndexResponse): IndexResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Result result */ 1:
                    message.result = Result.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndexResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Result result = 1; */
        if (message.result)
            Result.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IndexResponse
 */
export const IndexResponse = new IndexResponse$Type();
/**
 * @generated ServiceType for protobuf service SearchService
 */
export const SearchService = new ServiceType("SearchService", [
    { name: "Search", options: {}, I: SearchRequest, O: SearchResponse },
    { name: "Index", options: {}, I: IndexRequest, O: IndexResponse }
]);
