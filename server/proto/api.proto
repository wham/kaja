syntax = "proto3";

option go_package = "pkg/api";

service Api {
  rpc Compile(CompileRequest) returns (CompileResponse);
  rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse);
  rpc GetStub(GetStubRequest) returns (GetStubResponse);
}

message CompileRequest {
  int32 log_offset = 1;
  bool force = 2;
  string project_name = 3;
  string workspace = 4;
}

message CompileResponse {
  CompileStatus status = 1;
  repeated Log logs = 2;
  repeated Source sources = 3;
}

enum CompileStatus {
  STATUS_UNKNOWN = 0;
  STATUS_READY = 1;
  STATUS_ERROR = 2;
  STATUS_RUNNING = 3;
}

message Log {
  LogLevel level = 1;
  string message = 2;
}

enum LogLevel {
  LEVEL_DEBUG = 0;
  LEVEL_INFO = 1;
  LEVEL_WARN = 2;
  LEVEL_ERROR = 3;
}

enum RpcProtocol {
  RPC_PROTOCOL_TWIRP = 0;
  RPC_PROTOCOL_GRPC = 1;
}

message Source {
  string path = 1;
  string content = 2;
}

message GetConfigurationRequest {}

message GetConfigurationResponse {
  Configuration configuration = 1;
  repeated Log logs = 2;
}

message Configuration {
  // kaja can be deployed at a subpath - i.e. kaja.tools/demo
	// This field is used to set the subpath.
	// The server uses it to generate the correct paths in HTML and redirects.
	// The JS code is using relative paths and should be not dependent on this.
  string path_prefix = 1;
  repeated ConfigurationProject projects = 2;
  ConfigurationAI ai = 3;
}

message ConfigurationProject {
  string name = 1;
  RpcProtocol protocol = 2;
  string url = 3;
  string workspace = 4;
}

message ConfigurationAI {
  string base_url = 1;
  string api_key = 2;
}

message GetStubRequest {
  string project_name = 1;
}

message GetStubResponse {
  string stub = 1;
}